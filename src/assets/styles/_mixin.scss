// scss-docs-start grid-breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
) !default;

@mixin transitions($speed: 0.5s, $property: all, $timing: ease-in-out) {
  -webkit-transition: $property $speed $timing;
  -moz-transition: $property $speed $timing;
  -o-transition: $property $speed $timing;
  transition: $property $speed $timing;
}

@mixin rotate($deg: 0deg) {
  -webkit-transform: rotate($deg);
  -ms-transform: rotate($deg);
  transform: rotate($deg);
}

@mixin borderRadius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -o-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin scale($scale) {
  -webkit-transform: scale($scale);
  -moz-transform: scale($scale);
  -ms-transform: scale($scale);
  -o-transform: scale($scale);
  transform: scale($scale);
}

@mixin ellipsis() {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin boxShadow($colour, $length) {
  $value: ();
  @for $i from 1 through $length {
    $px: $i + px;
    $shadow: $px $px $colour;
    $value: append($value, $shadow, comma);
  }
  text-shadow: $value;
}

@mixin grayscale($value) {
  filter: grayscale($value);
  -webkit-filter: grayscale($value);
  -moz-filter: grayscale($value);
}

@mixin outline($color: var(--bs-primary), $size: 1px) {
  box-shadow: none;
  outline: $size solid $color;
}

@mixin visually-hidden() {
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important; // Fix for https://github.com/twbs/bootstrap/issues/25686
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;

  // Fix for positioned table caption that could become anonymous cells
  &:not(caption) {
    position: absolute !important;
  }
}

@mixin visually-hidden-focusable() {
  &:not(:focus):not(:focus-within) {
    @include visually-hidden();
  }
}

@mixin section-padding($size: lg) {
  @if $size == sm {
    padding-top: rem(10);  // 10px = 0.625rem
    padding-bottom: rem(10);

    @media (min-width: 768px) {
      padding-top: rem(20);  // 20px = 1.25rem
      padding-bottom: rem(20);
    }

    @media (min-width: 1024px) {
      padding-top: rem(30);  // 30px = 1.875rem
      padding-bottom: rem(30);
    }
  } @else if $size == md {
    padding-top: rem(20);  // 20px = 1.25rem
    padding-bottom: rem(20);

    @media (min-width: 768px) {
      padding-top: rem(40);  // 40px = 2.5rem
      padding-bottom: rem(40);
    }

    @media (min-width: 1024px) {
      padding-top: rem(60);  // 60px = 3.75rem
      padding-bottom: rem(60);
    }
  } @else if $size == lg {
    padding-top: rem(40);  // 40px = 2.5rem
    padding-bottom: rem(40);

    @media (min-width: 768px) {
      padding-top: rem(60);  // 60px = 3.75rem
      padding-bottom: rem(60);
    }

    @media (min-width: 1024px) {
      padding-top: rem(90);  // 90px = 5.625rem (default for lg)
      padding-bottom: rem(90);
    }
  } @else if $size == xl {
    padding-top: rem(60);  // 60px = 3.75rem
    padding-bottom: rem(60);

    @media (min-width: 768px) {
      padding-top: rem(90);  // 90px = 5.625rem
      padding-bottom: rem(90);
    }

    @media (min-width: 1024px) {
      padding-top: rem(120);  // 120px = 7.5rem
      padding-bottom: rem(120);
    }
  }
}

@mixin transition($property: all, $duration: .5s, $timing: ease) {
  -webkit-transition: $property $duration $timing;
  -moz-transition: $property $duration $timing;
  -o-transition: $property $duration $timing;
  transition: $property $duration $timing;
}

@mixin transform($transform) {
  -webkit-transform: $transform;
  -moz-transform: $transform;
  -ms-transform: $transform;
  -o-transform: $transform;
  transform: $transform;
}
